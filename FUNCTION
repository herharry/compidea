Functions allow to structure programs in segments of code to perform^ individual tasks.^In C++, a function is a group of statements that is given a name, and^ which can be called from some point of the program. The most common^ syntax to define a function is:^type name ( parameter1, parameter2, ...) { statements }^Where:^- type is the type of the value returned by the function.^- name is the identifier by which the function can be called.^- parameters (as many as needed): Each parameter consists of a type followed^ by an identifier, with each parameter being separated from the next^ by a comma. Each parameter looks very much like a regular variable^ declaration (for example: int x), and in fact acts within the function as a ^regular variable which is local to the function. The purpose of parameters^ is to allow passing arguments to the function from the location where^ it is called from.^- statements is the function's body. It is a block of statements ^surrounded by braces { } that specify what the function actually does.^^A function can actually be called multiple times within a program, ^and its argument is naturally not limited just to literals.^Void can also be used in the function's parameter list to explicitly specify that^ the function takes no actual parameters when called.^In C++, an empty parameter list can be used instead of void with same ^meaning, but the use of void in the argument list was popularized by the C language,^ where this is a requirement.^^Something that in no case is optional are the parentheses that follow the function^ name, neither in its declaration nor when calling it. And even when the function^ takes no parameters, at least an empty pair of parentheses shall always be ^appended to the function name. See how printmessage was called in an ^earlier example:^^printmessage ();^^The parentheses are what differentiate functions from other^ kinds of declarations or statements. The following would not call the^ function:^^printmessage;^^^CALL BY VALUE AND CALL BY REFERENCE^Call by Value: When calling a function by value, what is passed to the function are^ the values of these arguments on the moment of the call, which are copied^ into the variables represented by the function parameters.^Call by Reference: the function duplicate in this code duplicates the value of^ its three arguments, causing the variables used as arguments to actually be ^modified by the call.o gain access to its arguments, the function declares^ its parameters as references. In C++, references are indicated^ with an ampersand (&) following the parameter type, as in the^ parameters taken by duplicate in the example above. When a ^variable is passed by reference, what is passed is no longer a copy,^ but the variable itself, the variable identified by the function parameter, ^becomes somehow associated with the argument passed to the function, and^ any modification on their corresponding local variables within the ^function are reflected in the variables passed as arguments in the call.^


ÿ